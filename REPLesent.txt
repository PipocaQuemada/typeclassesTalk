| \gTypeclasses 101

How to make ad hoc polymorphism less ad hoc

---

| What are type classes?

OO's big idea: bundling implementation and data is good 
 Implementation is found at runtime on the data

Typeclass's big idea: separating implementation from data is good.
 Implementation is found at compile-time based on the type

---

| History and motivation

Invented by Phil Wadler in '88 in the paper "how to make ad hoc polymorphism less ad hoc" to
solve 2 problems for Haskell:

* overloading equality operators

* overloading numeric operators


---

| In Haskell, typeclasses are an actual language feature

class Eq a where
    (==) :: a -> a -> Bool

instance Eq Bool where
    True == True = True
    False == False = True
    _ == _ = False

member :: Eq a => a -> [a] -> Bool

---

| In Scala, they're just a pattern

```
trait Eq[A] {
  def ===(x: A, y: A): Boolean
}

object BooleanInstances {
  implicit val eqInstance = new Eq[Boolean] {
    def ===(x: Boolean, y: Boolean) = (x, y) match {
      case (true, true) => true
      case (false, false) => true
      case _ => false
    }
  }
}
import BooleanInstances._
---
```
// Optional trick for more natural syntax
// Note, this only has to be written once per typeclass

final case class EqOps[A](a: A)(implicit eq: Eq[A]){
  def ===(other: A) = eq.===(a, other)
}
object EqSyntax {
  implicit def eqSyntax[A](x: A)(implicit eq: Eq[A]) = EqOps(x)
} 

import EqSyntax._

---

| Retroactive extension of library code

In OO, you can't make a library class extend a new interface.
The best you can do is create a new subclass that implements the interface
or wrap it in a type that implements the interface.
Implicit conversions help in Scala, but need to be written once per wrapping type


With typeclasses, you can provide an implementation in the library that defines
the new typeclass, or in your own application codebase.

---
| A brief digression: monoids


In math, a Monoid is a set S, a closed binary associative operation *, 
and an identity element i.

A closed binary operation means *: S x S => S

Associative means (a * b) * c == a * (b * c)

Identity means a * i == a == i * a

examples: (Int, +, 0), (Int, *, 1), (Bool, &&, true), 
(Bool, ||, false), (Set[A], union, Set.empty), 
(List[A], ++, List.empty), (a => a, compose, id) 

---

| Naive OO Monoid trait

```
trait Monoid {
  def id: Monoid
  def <>(other:Monoid): Monoid
}

case class MyString(s: String) extends Monoid {
  def id: Monoid = MyString("")
  def <>(other:Monoid): Monoid =
    other match {
      case MyString(s2) => MyString(s + s2)
      case _ => throw new Exception("expected another MyString in <>")
    }
}

---
 There are 3 big problems with this:

* `List(1) <> MyString("1")` compiles, but isn't sensible.

* MyString("1") <> MyString("2") : Monoid
  - we've essentially upcasted to a nearly useless interface type

* Where do you get id from if you don't have an instance?

```
   def foldM(list: List[Monoid]) : Monoid =
    list.fold(???)(_ <> _)

---

| Correct OO Monoid trait
```
trait Monoid[A <: Monoid[A]] {
  val id: A 
  def <>(other:A): A
}

// Solves first two problems, but not the 3rd

---
| Monoid typeclass
```
trait Monoid[A] {
  val id: A
  def <>(x:A , y:A): A
}

final case class MonoidOps[A](x: A)(implicit M: Monoid[A]){
  def <>(y: A) = M.<>(x, y)
}
object MonoidSyntax{
  implicit def monoidSyntax[A](a: A)(implicit M: Monoid[A]) = MonoidOps(a)
  implicit def id[A](implicit M: Monoid[A]) = M.id
}

import MonoidSyntax._

---

| No need for data to have access to implementation

```
def foldM[A](list: List[A])(implicit m: Monoid[A]) =
  list.fold(m.id)(_ <> _)

---
| Multiple implementations
```
case class Sum(value: Int)
case class Mult(value: Int)
case class Max(value: Int)
case class Min(value: Int)

object IntMonoids {
  implicit val sumInstance = new Monoid[Sum] {
    def <>(x: Sum, y: Sum) = Sum(x.value + y.value)
    val id = Sum(0)
  }
  implicit val multInstance = new Monoid[Mult] {
    def <>(x: Mult, y: Mult) = Mult(x.value * y.value)
    val id = Mult(1)
  }
  implicit val maxInstance = new Monoid[Max] {
    def <>(x: Max, y: Max) = Max( Math.max(x.value, y.value) )
    val id = Max(Int.MinValue)
  }
  implicit val minInstance = new Monoid[Min] {
    def <>(x: Min, y: Min) = Min( Math.min(x.value, y.value) )
    val id = Min(Int.MaxValue)
  }
}

import IntMonoids._
---

| Conditional implementation

```
object MonoidInstances {

  implicit def functionMonoid[A, B](implicit bM: Monoid[B]) = new Monoid[A => B] {
    val id = (a: A) => bM.id
    def <>(x: A => B, y: A => B) = a => x(a) <> y(a)
  }

  implicit def tupleMonoid[A, B](implicit aM: Monoid[A], bM: Monoid[B]) = 
    new Monoid[(A, B)] {
      val id = (aM.id, bM.id)
      def <>(x: (A, B), y: (A, B)) = (x, y) match {
        case ((xa, xb), (ya, yb)) => ((xa <> ya), (xb <> yb))
      }
    }
}

---

| Polymorphic values


---

| Heterogenous collections


```
// Typeclass approach
// Notice: only one Render implemetation for every element of the list
def renderAll(objectsToRender: List[A])(implicit r: Render[A])

// OO approach
// every element has its own Render implemention
def renderAll(objectsToRender: List[Renderable])

---

| Recap

How does this differ from "normal" OO?

* Retroactive extension of library code

* Use newtypes to control multiple instances in a type directed way

* Conditional implementation of typeclasses

* Completely type directed, can be resolved statically

* No need for data to have access to implementation

* Polymorphic values / return type polymorphism

---

| Questions?
